package config

import (
	"fmt"

	"github.com/fsnotify/fsnotify"
	"github.com/spf13/viper"
)

var App AppConfig

type AppConfig struct {
	Name string `mapstructure:"name"`
	Port int    `mapstructure:"port"`
}

func LoadConfig() error {
  viper.SetConfigName("{{.ConfigName}}")
	viper.AddConfigPath(".")
	viper.AddConfigPath("./config")
	viper.AddConfigPath("$HOME/.config")
	viper.SetConfigType("{{.ConfigType}}")

	if err := viper.ReadInConfig(); err != nil {
		return fmt.Errorf("error reading config file, %s", err)
	}

	err := viper.Unmarshal(&App)
	if err != nil {
		return fmt.Errorf("unable to decode config into struct, %v", err)
	}

	viper.WatchConfig()
	viper.OnConfigChange(func(e fsnotify.Event) {
		fmt.Println("config file changed:", e.Name)
	})

	// env
	viper.AutomaticEnv()
	viper.SetEnvPrefix("APP")

	return nil
}
