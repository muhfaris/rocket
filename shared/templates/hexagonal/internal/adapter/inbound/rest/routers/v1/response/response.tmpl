package response

import (
	"github.com/gofiber/fiber/v2"
)

type R struct {
	Data     any      `json:"data,omitempty"`
	Message  string   `json:"message,omitempty"`
	Errors   []Error  `json:"errors,omitempty"`
	Metadata Metadata `json:"metadata"`
}

type Error struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

type Metadata struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	Latency    any         `json:"latency"`
	RequestID  any         `json:"request_id"`
}

type Pagination struct {
	Next  *string `json:"next,omitempty"`
	Prev  *string `json:"prev,omitempty"`
	Limit *int    `json:"limit,omitempty"`
	Total *int    `json:"total,omitempty"`
	Page  *int    `json:"page,omitempty"`
}

func Success(c *fiber.Ctx, data any) error {
	var (
		defaultCode = fiber.StatusOK
		requestID   = c.Locals(fiber.HeaderXRequestID)
		latency     = c.Locals(fiber.HeaderServerTiming)
	)

	result := R{
		Data: data,
		Metadata: Metadata{
			RequestID: requestID,
			Latency:   latency,
		},
	}

	return c.Status(defaultCode).JSON(result)
}

func Fail(c *fiber.Ctx, err error) error {
	var (
		defaultCode = fiber.StatusBadRequest
		requestID   = c.Locals(fiber.HeaderXRequestID)
		latency     = c.Locals(fiber.HeaderServerTiming)
	)

	result := R{
		Errors: []Error{
			{
				Message: err.Error(),
			},
		},
		Metadata: Metadata{
			RequestID: requestID,
			Latency:   latency,
		},
	}

	return c.Status(defaultCode).JSON(result)
}
