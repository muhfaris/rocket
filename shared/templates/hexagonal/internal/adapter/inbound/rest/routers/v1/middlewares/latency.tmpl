package middleware

import (
	"context"
	"fmt"
	"time"

	"github.com/gofiber/fiber/v2"
	libcontext "{{.PackagePath}}/shared/context"
)

func Latency() func(c *fiber.Ctx) error {
	return func(c *fiber.Ctx) error {
		var (
			start = time.Now()
			ctx   = c.UserContext()
		)

		ctx = context.WithValue(ctx, libcontext.ContextLatency, start)
		c.SetUserContext(ctx)
		err := c.Next()

		// Calculate latency in milliseconds
		latencyMs := float64(time.Since(start).Nanoseconds()) / 1e6

		// Add latency to response header
		latency := fmt.Sprintf("%.2fms", latencyMs)
		c.Set(fiber.HeaderServerTiming, latency)
		c.Locals(fiber.HeaderServerTiming, latency)

		return err
	}
}
