package bootstrap

import (
	"{{.PackagePath}}/config"
	{{- if .IsRedis}}
	redisadapter "{{.PackagePath}}/internal/adapter/outbound/cache/redis"
	{{- end}}
	{{- if .IsPSQL}}
	psqladapter "{{.PackagePath}}/internal/adapter/outbound/datastore/psql"
	pgsqlrepository "{{.PackagePath}}/internal/adapter/outbound/datastore/psql/repository"
	{{- end}}
	{{- if .IsSQLite}}
	sqliteadapter "{{.PackagePath}}/internal/adapter/outbound/datastore/sqlite"
	sqliterepository "{{.PackagePath}}/internal/adapter/outbound/datastore/sqlite/repository"
	{{- end}}
	{{- if .IsMySQL}}
	mysqladapter "{{.PackagePath}}/internal/adapter/outbound/datastore/mysql"
	mysqlrepository "{{.PackagePath}}/internal/adapter/outbound/datastore/mysql/repository"
	{{- end}}
	{{- if .IsMongoDB}}
	mongoadapter "{{.PackagePath}}/internal/adapter/outbound/datastore/mongo"
	{{- end}}
	portregistry "{{.PackagePath}}/internal/core/port/inbound/registry"
	"{{.PackagePath}}/internal/core/port/outbound/repository"
	portservice "{{.PackagePath}}/internal/core/port/inbound/service"
)

func InitializeRepository() portregistry.Repository {
	return &AppRepository{
		{{if .IsRedis}}
		cacheRepository: redisadapter.New(
			redisadapter.RedisOptions{
				Addr:     config.AppRepository.Cache.Redis.Addr,
				Username: config.AppRepository.Cache.Redis.Username,
				Password: config.AppRepository.Cache.Redis.Password,
				DB:       config.AppRepository.Cache.Redis.DB,
			},
		),
		{{end}}

		{{if .IsPSQL}}
		psqlRepository: psqladapter.New(psqladapter.PSQLConfig{
			Host:     config.AppRepository.Datastore.PSQL.Host,
			Port:     config.AppRepository.Datastore.PSQL.Port,
			Username: config.AppRepository.Datastore.PSQL.Username,
			Password: config.AppRepository.Datastore.PSQL.Password,
			DB:       config.AppRepository.Datastore.PSQL.DB,
		}),
		{{end}}

		{{if .IsSQLite}}
		sqliteRepository: sqliteadapter.New(sqliteadapter.SQLiteConfig{
			Path: config.AppRepository.Datastore.SQLite.Path,
			Mode: config.AppRepository.Datastore.SQLite.Mode, // Optional
		}),
		{{end}}

		{{if .IsMySQL}}
		mysqlRepository: mysqladapter.New(mysqladapter.MySQLConfig{
			Host:     config.AppRepository.Datastore.MySQL.Host,
			Port:     config.AppRepository.Datastore.MySQL.Port,
			Username: config.AppRepository.Datastore.MySQL.Username,
			Password: config.AppRepository.Datastore.MySQL.Password,
			DB:       config.AppRepository.Datastore.MySQL.DB,
		}),
		{{end}}

		{{if .IsMongoDB}}
		mongoRepository: mongoadapter.New(mongoadapter.MongoConfig{
			Host:     config.AppRepository.Datastore.MongoDB.Host,
			Port:     config.AppRepository.Datastore.MongoDB.Port,
			Username: config.AppRepository.Datastore.MongoDB.Username,
			Password: config.AppRepository.Datastore.MongoDB.Password,
			DB:       config.AppRepository.Datastore.MongoDB.DB,
			AuthDB:   config.AppRepository.Datastore.MongoDB.AuthDB, // Optional
		}),
		{{end}}
	}
}

// AppRepository struct would need to be updated to include new repository types
type AppRepository struct {
	{{- if .IsRedis}}
	cacheRepository repository.CacheRepository
	{{- end}}

	{{- if .IsPSQL}}
	psqlRepository repository.PSQLRepository
	{{- end}}

	{{- if .IsSQLite}}
	sqliteRepository repository.SQLiteRepository
	{{- end}}

	{{- if .IsMySQL}}
	mysqlRepository repository.MySQLRepository
	{{- end}}

	{{- if .IsMongoDB}}
	mongoRepository repository.MongoRepository
	{{- end}}
}

{{if .IsRedis}}
func (a *AppRepository) CacheRepository() repository.CacheRepository {
	return a.cacheRepository
}
{{end}}

{{if .IsPSQL}}
func (a *AppRepository) PSQLRepository() repository.PSQLRepository {
	return a.psqlRepository
}

{{- range .Repositories}}
	func (a *AppRepository) Get{{.}}() repository.{{.}}{
		return pgsqlrepository.New{{.}}(a.psqlRepository)
	}
{{- end}}

{{end}}

{{if .IsSQLite}}
func (a *AppRepository) SQLiteRepository() repository.SQLiteRepository {
	return a.sqliteRepository
}

{{- range .Repositories}}
	func (a *AppRepository) Get{{.}}() repository.{{.}}{
		return sqliterepository.New{{.}}(a.sqliteRepository)
	}
{{- end}}
{{end}}

{{if .IsMySQL}}
func (a *AppRepository) MySQLRepository() repository.MySQLRepository {
	return a.mysqlRepository
}

{{- range .Repositories}}
	func (a *AppRepository) Get{{.}}() repository.{{.}}{
		return mysqlrepository.New{{.}}(a.mysqlRepository)
	}
{{- end}}

{{end}}

{{if .IsMongoDB}}
func (a *AppRepository) MongoRepository() repository.MongoRepository {
	return a.mongoRepository
}
{{end}}

{{- range .Repositories}}
func (a *AppRepository) Get{{.}}() repository.{{.}}{
	return nil
}
{{- end}}

